name: Docker CI
on:
  push:
    branches: [master, main]
    paths:
      - 'backend/**'
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'backend/**'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.docker_tag.outputs.tag }}
    steps: 
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set Up Docker build
        uses: docker/setup-buildx-action@v2
      
      - name: Determine Docker Tag
        id: docker_tag
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "tag=latest" >> $GITHUB_ENV
            echo "tag=latest" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "tag=pr-${{ github.event.number }}" >> $GITHUB_ENV
            echo "tag=pr-${{ github.event.number }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Build docker image
        run: |
          docker build -t krystofjan/kratos-gym-be:${{ env.tag }} ./backend
      
      - name: Push Docker image
        run: |
          docker push krystofjan/kratos-gym-be:${{ env.tag }}

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Install Python
        run: |
          sudo apt update
          sudo apt install -y python3 python3-pip
      
      - name: Start PostgreSQL service
        run: |
          docker compose up postgres -d
      
      - name: Wait for PostgreSQL to be ready
        run: |
          until docker exec kratos-gym-postgres-1 pg_isready -U postgres; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done
          docker ps
      
      - name: Execute SQL script
        run: |
          cat ./backend/db/full_db_neon.sql | docker exec -i kratos-gym-postgres-1 psql -U postgres -d kratos-dev
      
      - name: Start Backend container
        run: |
          docker build -t krystofjan/kratos-gym-be:test ./backend
          docker run -d -p 7000:7000 --net=host krystofjan/kratos-gym-be:test

          while true; do
            STATUS_CODE=$(curl -o /dev/null -s -w "%{http_code}" "http://localhost:700/api/test/")
            
            if [ "$STATUS_CODE" -eq 200 ]; then
              echo "OK response received! Status Code: 200"
              break
            else
              echo "Not ready yet (Status: $STATUS_CODE). Retrying in 5 seconds..."
              sleep 5
            fi
          done
      
      - name: Install dependencies
        run: |

          pip install -r backend/tests/requirements.txt
      
      - name: Run Pytest tests
        run: |
          pytest backend/tests
