name: Docker CI
on:
  push:
    branches: [master, main]
    paths:
      - 'backend/**' 
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'backend/**'  

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.docker_tag.outputs.tag }}
    steps: 
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set Up Docker build
        uses: docker/setup-buildx-action@v2
      
      - name: Determine Docker Tag
        id: docker_tag
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "tag=latest" >> $GITHUB_ENV
            echo "tag=latest" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "tag=pr-${{ github.event.number }}" >> $GITHUB_ENV
            echo "tag=pr-${{ github.event.number }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Build docker image
        run: |
          docker build -t krystofjan/kratos-gym-be:${{ env.tag }} ./backend
      
      - name: Push Docker image
        run: |
          docker push krystofjan/kratos-gym-be:${{ env.tag }}

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Start Docker Compose
        run: |
          docker compose -f backend/docker-compose.yml up -d

      - name: Wait for PostgreSQL to be ready
        run: |
          # Wait for PostgreSQL to be ready
          docker exec postgres pg_isready -U postgres -d kratos-dev --quiet
          while [ $? -ne 0 ]; do
            sleep 1
            docker exec postgres pg_isready -U postgres -d kratos-dev --quiet
          done

      - name: Run SQL Script
        run: |
            docker exec postgres psql -U postgres -d kratos-dev -f ./backend/db/full_db_neon.sql
          

      - name: Install dependencies
        working-directory: ./backend/tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run tests
        working-directory: ./backend/tests
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: kratos-dev
        run: |
          pytest

      - name: Cleanup
        if: always()
        run: |
          docker compose -f backend/docker-compose.yml down
